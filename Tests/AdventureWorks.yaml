## AdventureWorks SQL Questions
## This file contains SQL questions and answers for the AdventureWorks database.
## The questions are divided into three categories: Easy, Medium, and Hard. 
## Easy questions are simple SELECT statements, while Medium and Hard questions involve JOINs, GROUP BY, and other SQL concepts.
## The questions are designed to test your SQL skills and help you practice writing SQL queries.
## You can find these questions in https://learnsql.com/blog/sql-practice-for-beginners-adventureworks-exercises/?utm_source=social&utm_medium=linkedin&utm_campaign=li_post

## Q - is the number of the question
## Q-AdvW - is the question text
## R-AdvW - is the response of my application - AskSQL
## S-AdvW - is the solution response from the reference link

Grade_type:
    - Equal: The result sets contain exactly the same data, regardless of column names.
    - Correct+: The submitted query returns all data from the reference query plus additional information.
    - Correct-: The submitted query returns similar data but with differences in naming, column order, or presentation.
    - Incorrect: The submitted query returns completely different data compared to the reference query.

Questions:
  Q1:
    Q-AdvW: Select the job title of all male employees who are not married.
    R-AdvW: |
      SELECT JobTitle
      FROM HumanResources.Employee
      WHERE Gender = 'M' AND MaritalStatus = 'S';
    S-AdvW: |
      SELECT JobTitle
      FROM HumanResources.Employee
      WHERE Gender = 'M'
      AND MaritalStatus != 'M';
  Q2:
    Q-AdvW: Select the BusinessEntityID, Rate, and RateChangeDate for all employees whose pay rate has ever been 50 or more.
    R-AdvW: |
      SELECT 
        e.BusinessEntityID, 
        e.NationalIDNumber, 
        e.LoginID, 
        e.JobTitle, 
        eph.Rate, 
        eph.RateChangeDate
      FROM 
          HumanResources.Employee e
      JOIN 
          HumanResources.EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID
      WHERE 
          eph.Rate >= 50
      ORDER BY 
          e.BusinessEntityID, 
          eph.RateChangeDate DESC;
    S-AdvW: |
      SELECT BusinessEntityID, Rate, RateChangeDate
      FROM HumanResources.EmployeePayHistory
      WHERE Rate >= 50;

  Q3:
    Q-AdvW: Select the BusinessEntityID, DepartmentID, and StartDate for each employee who started working in any department in 2008.
    R-AdvW: |
      SELECT 
          BusinessEntityID,
          DepartmentID,
          StartDate
      FROM 
          HumanResources.EmployeeDepartmentHistory
      WHERE 
          YEAR(StartDate) = 2008;
    S-AdvW: |
      SELECT BusinessEntityID, DepartmentID, StartDate
      FROM HumanResources.EmployeeDepartmentHistory
      WHERE StartDate BETWEEN '2008-01-01' AND '2008-12-31';

  Q4:
    Q-AdvW: Select the department IDs, names, and group names for all departments whose name starts with ‘Prod’ OR for all departments whose group name ends with ‘ring’.
    R-AdvW: |
      SELECT DepartmentID, Name, GroupName 
      FROM HumanResources.Department 
      WHERE Name LIKE 'Prod%' OR GroupName LIKE '%ring';
    S-AdvW: |
      SELECT DepartmentID, Name, GroupName
      FROM HumanResources.Department
      WHERE Name LIKE 'Prod%'
      OR GroupName LIKE '%ring';
  Q5:
    Q-AdvW: Select department names that belong to either the ‘Research and Development’ group or the ‘Manufacturing’ group.
    R-AdvW: |
      SELECT Name
      FROM HumanResources.Department
      WHERE GroupName IN ('Research and Development', 'Manufacturing');
    S-AdvW: |
      SELECT Name
      FROM HumanResources.Department
      WHERE GroupName IN ('Research and Development', 'Manufacturing');
  Q6:
    Q-AdvW: Select employees’ IDs with all the names of the departments where they have ever worked.
    R-AdvW: |
      SELECT 
          E.BusinessEntityID AS EmployeeID,
          STRING_AGG(D.Name, ', ') AS DepartmentNames
      FROM 
          HumanResources.Employee E
      JOIN 
          HumanResources.EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID
      JOIN 
          HumanResources.Department D ON EDH.DepartmentID = D.DepartmentID
      GROUP BY 
          E.BusinessEntityID
      ORDER BY 
          E.BusinessEntityID;
    S-AdvW: |
      SELECT edh.BusinessEntityID, d.Name
      FROM HumanResources.EmployeeDepartmentHistory AS edh
      JOIN HumanResources.Department AS d
      ON edh.DepartmentID = d.DepartmentID;
  Q7:
    Q-AdvW: Select the employee ID and job title along with the dates when the employee changed departments (StartDate) for all female employees.
    R-AdvW: |
      SELECT 
          e.BusinessEntityID AS EmployeeID,
          e.JobTitle,
          edh.StartDate
      FROM 
          HumanResources.Employee e
      INNER JOIN 
          HumanResources.EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID
      WHERE 
          e.Gender = 'F';
    S-AdvW: |
      SELECT e.BusinessEntityID, e.JobTitle, edh.StartDate
      FROM HumanResources.Employee AS e
      JOIN HumanResources.EmployeeDepartmentHistory AS edh
      ON e.BusinessEntityID = edh.BusinessEntityID
      WHERE e.Gender = 'F';

  Q8:
    Q-AdvW: Select job titles and their corresponding department names to find all job titles that have ever been used in each department. Do not include multiples of the same job title.
    R-AdvW: |
      SELECT DISTINCT 
          E.JobTitle, 
          D.Name AS DepartmentName
      FROM 
          HumanResources.Employee E
      INNER JOIN 
          HumanResources.EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID
      INNER JOIN 
          HumanResources.Department D ON EDH.DepartmentID = D.DepartmentID
      ORDER BY 
          D.Name, 
          E.JobTitle;
    S-AdvW: |
      SELECT DISTINCT e.JobTitle, d.Name
      FROM HumanResources.Employee AS e
      JOIN HumanResources.EmployeeDepartmentHistory AS edh
      ON e.BusinessEntityID = edh.BusinessEntityID
      JOIN HumanResources.Department AS d
      ON edh.DepartmentID = d.DepartmentID;
  Q9:
    Q-AdvW: Select distinct department names  and shift names (no duplicate pairs) that employees in each department work. Rename the department name to DepartmentName and shift name to ShiftName
    R-AdvW: |
      SELECT DISTINCT 
          D.Name AS DepartmentName,
          S.Name AS ShiftName
      FROM 
          HumanResources.EmployeeDepartmentHistory EDH
      INNER JOIN 
          HumanResources.Department D ON EDH.DepartmentID = D.DepartmentID
      INNER JOIN 
          HumanResources.Shift S ON EDH.ShiftID = S.ShiftID;
    S-AdvW: |
      SELECT DISTINCT d.Name AS DepartmentName, s.Name AS ShiftName
      FROM HumanResources.EmployeeDepartmentHistory AS edh
      JOIN HumanResources.Department AS d
      ON edh.DepartmentID = d.DepartmentID
      JOIN HumanResources.Shift AS s
      ON edh.ShiftID = s.ShiftID;

  Q10:
    Q-AdvW: Select employees’ IDs, department names, and shift names. Include only employees hired after 2010-01-01 and who work for departments within the Manufacturing and Quality Assurance groups.
    R-AdvW: |
      SELECT 
          E.BusinessEntityID AS EmployeeID,
          D.Name AS DepartmentName,
          S.Name AS ShiftName
      FROM 
          HumanResources.Employee E
      INNER JOIN 
          HumanResources.EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID
      INNER JOIN 
          HumanResources.Department D ON EDH.DepartmentID = D.DepartmentID
      INNER JOIN 
          HumanResources.Shift S ON EDH.ShiftID = S.ShiftID
      WHERE 
          E.HireDate > '2010-01-01'
          AND D.GroupName IN ('Manufacturing', 'Quality Assurance');
    S-AdvW: |
      SELECT e.BusinessEntityID, d.Name, s.Name
      FROM HumanResources.Employee AS e
      JOIN HumanResources.EmployeeDepartmentHistory AS edh
      ON e.BusinessEntityID = edh.BusinessEntityID
      JOIN HumanResources.Department AS d
      ON edh.DepartmentID = d.DepartmentID
      JOIN HumanResources.Shift AS s
      ON edh.ShiftID = s.ShiftID
      WHERE e.HireDate > '2010-01-01'
      AND d.GroupName IN ('Manufacturing', 'Quality Assurance');
  Q11:
    Q-AdvW: Select the minimum and maximum number of sick leave hours taken by the employees.
    R-AdvW: |
      SELECT 
          MIN(SickLeaveHours) AS MinimumSickLeaveHours,
          MAX(SickLeaveHours) AS MaximumSickLeaveHours
      FROM 
          HumanResources.Employee;
    S-AdvW: |
      SELECT MIN(SickLeaveHours) AS MinSickLeaveHours,
            MAX(SickLeaveHours) AS MaxSickLeaveHours
      FROM HumanResources.Employee;

  Q12:
    Q-AdvW: Select the job titles and the average number of vacation hours per job title.
    R-AdvW: |
      SELECT 
          JobTitle, 
          AVG(VacationHours) AS AverageVacationHours
      FROM 
          HumanResources.Employee
      GROUP BY 
          JobTitle;
    S-AdvW: |
      SELECT JobTitle, AVG(VacationHours) AS AvgVacationHours
      FROM HumanResources.Employee
      GROUP BY JobTitle;

  Q13:
    Q-AdvW: Select the employees’ gender and the count of employees of each gender.
    R-AdvW: |
      SELECT 
          Gender, 
          COUNT(BusinessEntityID) AS EmployeeCount
      FROM 
          HumanResources.Employee
      GROUP BY 
          Gender;
    S-AdvW: |
      SELECT Gender, COUNT(*) AS Count
      FROM HumanResources.Employee
      GROUP BY Gender;

  Q14:
    Q-AdvW: Find the count of departments in each department group. List only those department group names that have more than two departments.
    R-AdvW: |
      SELECT 
          D.GroupName, 
          COUNT(D.DepartmentID) AS DepartmentCount
      FROM 
          HumanResources.Department D
      GROUP BY 
          D.GroupName
      HAVING 
          COUNT(D.DepartmentID) > 2;
    S-AdvW: |
      SELECT GroupName, COUNT(*) AS DepartmentsCount
      FROM HumanResources.Department
      GROUP BY GroupName
      HAVING COUNT(*) > 2;

  Q15:
    Q-AdvW: Select the department names and the sum of sick leave hours taken by employees working currently in each department. Rename this column to SumSickLeaveHours.
    R-AdvW: |
      SELECT 
          D.Name, 
          SUM(E.SickLeaveHours) AS SumSickLeaveHours
      FROM 
          HumanResources.Employee E
      INNER JOIN 
          HumanResources.EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID
      INNER JOIN 
          HumanResources.Department D ON EDH.DepartmentID = D.DepartmentID
      WHERE 
          EDH.EndDate IS NULL  -- This condition ensures we only consider current departments
      GROUP BY 
          D.Name
    S-AdvW: |
      SELECT d.Name, SUM(e.SickLeaveHours) AS SumSickLeaveHours
      FROM HumanResources.Employee AS e
      JOIN HumanResources.EmployeeDepartmentHistory AS edh
      ON e.BusinessEntityID = edh.BusinessEntityID
      JOIN HumanResources.Department AS d
      ON edh.DepartmentID = d.DepartmentID
      WHERE edh.EndDate IS NULL
      GROUP BY d.Name;

   ########################################################
   ########################################################
   ########################################################
   ########################################################   
   ########################################################
   
  Q16:
    Q-AdvW:  Select employees’ IDs and their current pay rates.
    R-AdvW: |
      WITH RankedPayHistory AS (
          SELECT 
              BusinessEntityID,
              Rate,
              ROW_NUMBER() OVER (PARTITION BY BusinessEntityID ORDER BY RateChangeDate DESC) AS RowNum
          FROM 
              HumanResources.EmployeePayHistory
      )
      SELECT 
          E.BusinessEntityID AS EmployeeID,
          RPH.Rate AS CurrentPayRate
      FROM 
          HumanResources.Employee E
      INNER JOIN 
          RankedPayHistory RPH ON E.BusinessEntityID = RPH.BusinessEntityID
      WHERE 
          RPH.RowNum = 1;
    S-AdvW: |
      SELECT e.BusinessEntityID, e.Rate AS CurrentPayRate
      FROM HumanResources.EmployeePayHistory AS e
      WHERE e.RateChangeDate = (
                  SELECT MAX(e2.RateChangeDate)
                  FROM HumanResources.EmployeePayHistory AS e2
                  WHERE e2.BusinessEntityID = e.BusinessEntityID
              );
  Q17:
    Q-AdvW: Select the minimum, average, and maximum pay rates from employees’ current pay rates.
    R-AdvW: |
      SELECT 
          MIN(Rate) AS MinimumPayRate,
          AVG(Rate) AS AveragePayRate,
          MAX(Rate) AS MaximumPayRate
      FROM 
          (
          SELECT 
              BusinessEntityID,
              Rate,
              ROW_NUMBER() OVER (PARTITION BY BusinessEntityID ORDER BY RateChangeDate DESC) AS RowNum
          FROM 
              HumanResources.EmployeePayHistory
          ) AS CurrentPayRates
      WHERE 
          RowNum = 1;
    S-AdvW: |
      SELECT MIN(CurrentPayRate) AS MinPayRate,
            AVG(CurrentPayRate) AS AvgPayRate,
            MAX(CurrentPayRate) AS MaxPayRate
      FROM (
              SELECT e.BusinessEntityID, e.Rate AS CurrentPayRate
              FROM HumanResources.EmployeePayHistory AS e
              WHERE e.RateChangeDate = (
                      SELECT MAX(e2.RateChangeDate)
                      FROM HumanResources.EmployeePayHistory AS e2
                      WHERE e2.BusinessEntityID = e.BusinessEntityID
                  )
      ) AS cpr;
  Q18:
    Q-AdvW: Select all employee IDs who took more than 60 hours of vacation or who took more than 60 hours of sick leave.
    R-AdvW: |
      SELECT BusinessEntityID 
      FROM HumanResources.Employee 
      WHERE VacationHours > 60 OR SickLeaveHours > 60;
    S-AdvW: |
      SELECT BusinessEntityID
      FROM HumanResources.Employee
      GROUP BY BusinessEntityID
      HAVING SUM(VacationHours) > 60
      
      UNION
      
      SELECT BusinessEntityID
      FROM HumanResources.Employee
      GROUP BY BusinessEntityID
      HAVING SUM(SickLeaveHours) > 60;
  Q19:
    Q-AdvW:  Select the IDs of employees who have the job titles ‘Sales Representative’ or ‘Tool Designer’ and who have worked (or are working) in the Sales or Marketing departments.List by value with the highest first.
    R-AdvW: |
      SELECT E.BusinessEntityID
      FROM HumanResources.Employee E
      JOIN HumanResources.EmployeeDepartmentHistory EDH
          ON E.BusinessEntityID = EDH.BusinessEntityID
      JOIN HumanResources.Department D
          ON EDH.DepartmentID = D.DepartmentID
      WHERE E.JobTitle IN ('Sales Representative', 'Tool Designer')
          AND D.Name IN ('Sales', 'Marketing')
      ORDER BY E.BusinessEntityID DESC;
    S-AdvW: |
      SELECT e.BusinessEntityID
      FROM HumanResources.Employee AS e
      WHERE e.JobTitle IN ('Sales Representative', 'Tool Designer')
      
      INTERSECT
      
      SELECT edh.BusinessEntityID
      FROM HumanResources.EmployeeDepartmentHistory AS edh
      JOIN HumanResources.Department AS d
      ON edh.DepartmentID = d.DepartmentID
      WHERE d.Name IN ('Sales', 'Marketing');
  Q20:
    Q-AdvW: Select the IDs, job titles, and department names for employees associated with Sales Representative or Marketing Manager roles.
    R-AdvW: |
      SELECT 
          e.BusinessEntityID AS ID,
          e.JobTitle,
          d.Name AS DepartmentName
      FROM 
          HumanResources.Employee e
      INNER JOIN 
          HumanResources.EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID
      INNER JOIN 
          HumanResources.Department d ON edh.DepartmentID = d.DepartmentID
      WHERE 
          e.JobTitle IN ('Sales Representative', 'Marketing Manager');
    S-AdvW: |
      SELECT e.BusinessEntityID, e.JobTitle, d.Name AS DepartmentName
      FROM HumanResources.Employee AS e
      JOIN HumanResources.EmployeeDepartmentHistory AS edh
      ON e.BusinessEntityID = edh.BusinessEntityID
      JOIN HumanResources.Department AS d
      ON edh.DepartmentID = d.DepartmentID
      WHERE e.JobTitle IN ('Sales Representative', 'Marketing Manager');

