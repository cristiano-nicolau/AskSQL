[
  {
    "id": "Q1",
    "grade": "Equal",
    "reason": "The answer contains the same data values as the expected result.",
    "reference_query": "select\n  l_returnflag,\n  l_linestatus,\n  sum(l_quantity) as sum_qty,\n  sum(l_extendedprice) as sum_base_price,\n  sum(l_extendedprice*(1-l_discount)) as sum_disc_price,\n  sum(l_extendedprice*(1-l_discount)*(1+l_tax)) as sum_charge,\n  avg(l_quantity) as avg_qty,\n  avg(l_extendedprice) as avg_price,\n  avg(l_discount) as avg_disc,\n  count(*) as count_order\nfrom\n   tpch.lineitem\nwhere\n    l_shipdate BETWEEN DATEADD(day, -120, (SELECT MAX(l_shipdate) FROM tpch.lineitem)) \n                    AND DATEADD(day, -60, (SELECT MAX(l_shipdate) FROM tpch.lineitem))\ngroup by\n  l_returnflag,\n  l_linestatus\norder by\n  l_returnflag,\n  l_linestatus;",
    "submitted_query": "SELECT \n    l_returnflag,\n    l_linestatus,\n    COUNT(*) AS count,\n    SUM(l_quantity) AS sum_quantity,\n    SUM(l_extendedprice) AS extended_price,\n    SUM(l_extendedprice * (1 - l_discount)) AS discounted_extended_price,\n    SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS discounted_extended_price_plus_tax,\n    AVG(l_quantity) AS average_quantity,\n    AVG(l_extendedprice) AS average_extended_price,\n    AVG(l_discount) AS average_discount\nFROM \n    tpch.lineitem\nWHERE \n    l_shipdate BETWEEN DATEADD(day, -120, (SELECT MAX(l_shipdate) FROM tpch.lineitem)) \n                    AND DATEADD(day, -60, (SELECT MAX(l_shipdate) FROM tpch.lineitem))\nGROUP BY \n    l_returnflag,\n    l_linestatus\nORDER BY \n    l_returnflag,\n    l_linestatus;"
  },
  {
    "id": "Q2",
    "grade": "Equal",
    "reason": "The answer contains the same data values as the expected result.",
    "reference_query": "select\n  s_acctbal,\n  s_name,\n  n_name,\n  p_partkey,\n  p_mfgr,\n  s_address,\n  s_phone,\n  s_comment\nfrom\n  tpch.supplier,\n  tpch.partsupp,\n  tpch.part,\n  tpch.nation,\n  tpch.region\nwhere\n  p_partkey = ps_partkey\n  and s_suppkey = ps_suppkey\n  and p_size = 5\n  and p_type like '%PROMO%'\n  and s_nationkey = n_nationkey\n  and n_regionkey = r_regionkey\n  and r_name = 'AFRICA'\n  and ps_supplycost = (\n    select\n      min(ps_supplycost)\n    from\n      tpch.partsupp, tpch.supplier,\n      tpch.nation, tpch.region\n    where\n      p_partkey = ps_partkey\n      and s_suppkey = ps_suppkey\n      and s_nationkey = n_nationkey\n      and n_regionkey = r_regionkey\n      and r_name = 'AFRICA'\n    )\norder by\n  s_acctbal desc,\n  n_name,\n  s_name,\n  p_partkey;",
    "submitted_query": "WITH RankedSuppliers AS (\n    SELECT \n        s.s_acctbal,\n        s.s_name,\n        n.n_name AS nation,\n        p.p_partkey,\n        p.p_mfgr,\n        s.s_address,\n        s.s_phone,\n        s.s_comment,\n        ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost, s.s_acctbal DESC) AS row_num\n    FROM \n        tpch.supplier s\n    JOIN \n        tpch.nation n ON s.s_nationkey = n.n_nationkey\n    JOIN \n        tpch.partsupp ps ON s.s_suppkey = ps.ps_suppkey\n    JOIN \n        tpch.part p ON ps.ps_partkey = p.p_partkey\n    JOIN \n        tpch.region r ON n.n_regionkey = r.r_regionkey\n    WHERE \n        r.r_name = 'AFRICA'\n        AND p.p_size = 5\n        AND p.p_type LIKE '%PROMO%'\n)\nSELECT \n    s_acctbal,\n    s_name,\n    nation,\n    p_partkey,\n    p_mfgr,\n    s_address,\n    s_phone,\n    s_comment\nFROM \n    RankedSuppliers\nWHERE \n    row_num = 1\nORDER BY \n    s_acctbal DESC\nOFFSET 0 ROWS\nFETCH NEXT 100 ROWS ONLY;"
  },
  {
    "id": "Q3",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  l_orderkey,\n  sum(l_extendedprice * (1 - l_discount)) as revenue,\n  o_orderpriority\nfrom\n  tpch.customer,\n  tpch.orders,\n  tpch.lineitem\nwhere\n  c_mktsegment = 'BUILDING'\n  and c_custkey = o_custkey\n  and l_orderkey = o_orderkey\n  and o_orderdate < '1995-01-01'\n  and l_shipdate > '1995-01-01'\ngroup by\n  l_orderkey,\n  o_orderpriority\norder by\n  revenue desc,\n  o_orderpriority\nlimit 10;",
    "submitted_query": "SELECT TOP 10 \n    o.o_shippriority, \n    SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,\n    o_orderpriority,\n    l.l_orderkey\nFROM \n    tpch.orders o\nINNER JOIN \n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\nINNER JOIN \n    tpch.customer c ON o.o_custkey = c.c_custkey\nWHERE \n    c.c_mktsegment = 'BUILDING'\n    AND o.o_orderdate < '1995-01-01'\n    AND l.l_shipdate > '1995-01-01'\nGROUP BY \n    o.o_shippriority\nORDER BY \n    revenue DESC;"
  },
  {
    "id": "Q4",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  o_orderpriority,\n  count(*) as order_count\nfrom\n  tpch.orders,\nwhere\n  co_orderdate >= '1992-01-01'\n  and o_orderdate < '1992-04-01'\n  and exists (\n    select\n      *\n    from\n      tpch.lineitem\n    where\n      l_orderkey = o_orderkey\n      and l_commitdate < l_receiptdate\n    )\ngroup by\n  o_orderpriority\norder by\n  o_orderpriority;",
    "submitted_query": "SELECT \n    o.o_orderpriority, \n    COUNT(DISTINCT o.o_orderkey) AS count\nFROM \n    tpch.orders o\nJOIN \n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\nWHERE \n    l.l_receiptdate > l.l_commitdate\n    AND o.o_orderdate >= '1992-01-01'  -- first quarter of 1992\n    AND o.o_orderdate < '1992-04-01'  -- first quarter of 1992\nGROUP BY \n    o.o_orderpriority\nORDER BY \n    o.o_orderpriority ASC;"
  },
  {
    "id": "Q5",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  n_name,\n  sum(l_extendedprice * (1 - l_discount)) as revenue  \nfrom\n  tpch.customer,\n  tpch.orders,\n  tpch.lineitem,\n  tpch.supplier,\n  tpch.nation,\n  tpch.region\nwhere\n  c_custkey = o_custkey\n  and l_orderkey = o_orderkey\n  and l_suppkey = s_suppkey\n  and c_nationkey = s_nationkey\n  and s_nationkey = n_nationkey\n  and n_regionkey = r_regionkey\n  and r_name = 'AMERICA'\n  and o_orderdate >= '1995-01-01' \n  and o_orderdate < '1996-01-01' \ngroup by\n  n_name\norder by\n  revenue desc;",
    "submitted_query": "SELECT \n    n.n_name, \n    SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue_volume\nFROM \n    tpch.lineitem l\nINNER JOIN \n    tpch.orders o ON l.l_orderkey = o.o_orderkey\nINNER JOIN \n    tpch.customer c ON o.o_custkey = c.c_custkey\nINNER JOIN \n    tpch.nation cn ON c.c_nationkey = cn.n_nationkey\nINNER JOIN \n    tpch.supplier s ON l.l_suppkey = s.s_suppkey\nINNER JOIN \n    tpch.nation sn ON s.s_nationkey = sn.n_nationkey\nINNER JOIN \n    tpch.region r ON cn.n_regionkey = r.r_regionkey\nWHERE \n    r.r_name = 'AMERICA'\n    AND o.o_orderdate >= '1995-01-01'\n    AND o.o_orderdate < '1996-01-01'\n    AND cn.n_name = sn.n_name\nGROUP BY \n    n.n_name\nORDER BY \n    revenue_volume DESC;"
  },
  {
    "id": "Q6",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  sum(l_extendedprice*l_discount) as revenue\nfrom\n  lineitem\nJOIN \n  tpch.partsupp p ON l.l_partkey = p.ps_partkey\nwhere\n  l_shipdate >= 1992-01-01' \n  and l_shipdate < '1993-01-01' \n  and l_discount between  0.01 - 0.01 AND 0.01 + 0.01 \n  and l_quantity < p.ps_availqty;",
    "submitted_query": "SELECT \n    SUM(l.l_extendedprice * l.l_discount) AS potential_revenue_increase\nFROM \n    tpch.lineitem l\nJOIN \n    tpch.partsupp p ON l.l_partkey = p.ps_partkey\nWHERE \n    l.l_shipdate >= '1992-01-01' \n    AND l.l_shipdate < '1993-01-01' \n    AND l.l_discount BETWEEN 0.01 - 0.01 AND 0.01 + 0.01 \n    AND l.l_quantity < p.ps_availqty;"
  },
  {
    "id": "Q7",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  supp_nation,\n  cust_nation,\n  l_year, sum(volume) as revenue\nfrom\n  (\n    select\n      n1.n_name as supp_nation,\n      n2.n_name as cust_nation,\n      extract(year from l_shipdate) as l_year,\n      l_extendedprice * (1 - l_discount) as volume\n    from\n      tpch.part,\n      tpch.supplier,\n      tpch.lineitem,\n      tpch.orders,\n      tpch.customer,\n      tpch.nation n1,\n      tpch.nation n2\n    where\n      s_suppkey = l_suppkey\n      and c_custkey = o_custkey\n      and o_orderkey = l_orderkey\n      and p_partkey = l_partkey\n      and s_nationkey = n1.n_nationkey\n      and c_nationkey = n2.n_nationkey\n      and (\n        (n1.n_name = 'BRAZIL' and n2.n_name = 'CANADA') or (n1.n_name = 'CANADA' and n2.n_name = 'BRAZIL')\n      )\n    and l_shipdate between date '1995-01-01' and date '1996-12-31'\n  ) as shipping\ngroup by\n  supp_nation,\n  cust_nation,\n  l_year\norder by\n  supp_nation,\n  cust_nation,\n  l_year;",
    "submitted_query": "SELECT \n      n1.n_name AS supplier_nation,\n      n2.n_name AS customer_nation,\n      YEAR(l.l_shipdate) AS year,\n      SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue\n  FROM \n      tpch.lineitem l\n  JOIN \n      tpch.supplier s ON l.l_suppkey = s.s_suppkey\n  JOIN \n      tpch.nation n1 ON s.s_nationkey = n1.n_nationkey\n  JOIN \n      tpch.orders o ON l.l_orderkey = o.o_orderkey\n  JOIN \n      tpch.customer c ON o.o_custkey = c.c_custkey\n  JOIN \n      tpch.nation n2 ON c.c_nationkey = n2.n_nationkey\n  WHERE \n      (n1.n_name = 'BRAZIL' AND n2.n_name = 'CANADA') OR \n      (n1.n_name = 'CANADA' AND n2.n_name = 'BRAZIL')\n      AND YEAR(l.l_shipdate) IN (1995, 1996)\n  GROUP BY \n      n1.n_name, n2.n_name, YEAR(l.l_shipdate)\n  ORDER BY \n      n1.n_name, n2.n_name, YEAR(l.l_shipdate);"
  },
  {
    "id": "Q8",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  o_year,\n  sum(case\n    when nation = 'BRAZIL' then volume\n    else 0\n  end) / sum(volume) as mkt_share\nfrom\n  (\n    select\n      extract(year from o_orderdate) as o_year,\n      l_extendedprice * (1 - l_discount) as volume,\n      n_name as nation\n    from\n      tpch.part,\n      tpch.supplier,\n      tpch.lineitem,\n      tpch.orders,\n      tpch.customer,\n      tpch.nation,\n      tpch.region\n    where\n      p_partkey = l_partkey\n      and s_suppkey = l_suppkey\n      and l_orderkey = o_orderkey\n      and o_custkey = c_custkey\n      and c_nationkey = n1.n_nationkey\n      and n1.n_regionkey = r_regionkey\n      and r_name = 'AMERICA'\n      and s_nationkey = n2.n_nationkey\n      and o_orderdate between date '1995-01-01' and date '1996-12-31'\n      and p_type = 'SMALL PLATED COPPER'\n  ) as all_nations\ngroup by\n  o_year\norder by\n  o_year;",
    "submitted_query": "SELECT \n    n.n_name AS nation,\n    SUM(l.l_extendedprice * (1 - l.l_discount)) / \n    (SELECT SUM(l1.l_extendedprice * (1 - l1.l_discount)) \n    FROM tpch.lineitem l1 \n    JOIN tpch.part p1 ON l1.l_partkey = p1.p_partkey \n    JOIN tpch.orders o1 ON l1.l_orderkey = o1.o_orderkey \n    JOIN tpch.nation n1 ON l1.l_suppkey = s.s_suppkey \n    JOIN tpch.supplier s ON l1.l_suppkey = s.s_suppkey \n    JOIN tpch.region r1 ON n1.n_regionkey = r1.r_regionkey \n    WHERE o1.o_orderdate BETWEEN '1995-01-01' AND '1996-12-31' \n    AND p1.p_type = 'SMALL PLATED COPPER' \n    AND r1.r_name = 'AMERICA') AS market_share\nFROM \n    tpch.lineitem l \nJOIN \n    tpch.part p ON l.l_partkey = p.p_partkey \nJOIN \n    tpch.orders o ON l.l_orderkey = o.o_orderkey \nJOIN \n    tpch.supplier s ON l.l_suppkey = s.s_suppkey \nJOIN \n    tpch.nation n ON s.s_nationkey = n.n_nationkey \nJOIN \n    tpch.region r ON n.n_regionkey = r.r_regionkey \nWHERE \n    o.o_orderdate BETWEEN '1995-01-01' AND '1996-12-31' \n    AND p.p_type = 'SMALL PLATED COPPER' \n    AND r.r_name = 'AMERICA' \n    AND n.n_name = 'BRAZIL' \nGROUP BY \n    n.n_name\nORDER BY \n    market_share DESC;"
  },
  {
    "id": "Q9",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  nation,\n  o_year,\n  sum(amount) as sum_profit\nfrom\n  (\n    select\n      n_name as nation,\n      extract(year from o_orderdate) as o_year,\n      (l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity) as amount\n    from\n      tpch.part,\n      tpch.supplier,\n      tpch.lineitem,\n      tpch.orders,\n      tpch.partsupp,\n      tpch.nation\n    where\n      s_suppkey = l_suppkey\n      and ps_suppkey = s_suppkey\n      and ps_partkey = p_partkey\n      and l_orderkey = o_orderkey\n      and s_nationkey = n_nationkey\n      and p_name like '%spring%green%yellow%'\n    )\n  as profit\ngroup by\n  nation,\n  o_year\norder by\n  nation,\n  o_year desc;",
    "submitted_query": "SELECT \n    n.n_name AS nation,\n    YEAR(l.l_shipdate) AS year,\n    SUM((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) AS profit\nFROM \n    tpch.lineitem l\nINNER JOIN \n    tpch.partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey\nINNER JOIN \n    tpch.supplier s ON l.l_suppkey = s.s_suppkey\nINNER JOIN \n    tpch.nation n ON s.s_nationkey = n.n_nationkey\nINNER JOIN \n    tpch.part p ON l.l_partkey = p.p_partkey\nWHERE \n    p.p_name LIKE '%spring%green%yellow%'\nGROUP BY \n    n.n_name, \n    YEAR(l.l_shipdate)\nORDER BY \n    n.n_name ASC, \n    YEAR(l.l_shipdate) DESC;"
  },
  {
    "id": "Q10",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  c_custkey,\n  c_name,\n  c_address,\n  c_nationkey,\n  c_phone,\n  c_acctbal,\n  c_comment,\n  sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom\n  tpch.customer,\n  tpch.orders,\n  tpch.lineitem,\n  tpch.nation\nwhere\n  c_custkey = o_custkey\n  and l_orderkey = o_orderkey\n  and o_orderdate >= 1993-01-01' \n  and o_orderdate < '1993-04-01'\n  and l_returnflag = 'R'\n  and c_nationkey = n_nationkey\ngroup by\n  c_custkey,\n  c_name,\n  c_address,\n  c_nationkey,\n  c_phone,\n  c_acctbal,\n  c_comment\norder by\n  revenue desc;",
    "submitted_query": "SELECT TOP 20 \n    c.c_name, \n    c.c_address, \n    n.n_name, \n    c.c_phone, \n    c.c_acctbal, \n    c.c_comment, \n    SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue_lost\nFROM \n    tpch.customer c\nJOIN \n    tpch.orders o ON c.c_custkey = o.o_custkey\nJOIN \n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\nJOIN \n    tpch.nation n ON c.c_nationkey = n.n_nationkey\nWHERE \n    l.l_returnflag = 'R' \n    AND o.o_orderdate >= '1993-01-01' \n    AND o.o_orderdate < '1993-04-01'  -- Change this to the desired quarter\nGROUP BY \n    c.c_name, \n    c.c_address, \n    n.n_name, \n    c.c_phone, \n    c.c_acctbal, \n    c.c_comment\nORDER BY \n    revenue_lost DESC;"
  },
  {
    "id": "Q11",
    "grade": "Incorrect",
    "reason": "The answer is incorrect and has different data from the expected result.",
    "reference_query": "select\n  ps_partkey,\n  sum(ps_supplycost * ps_availqty) as value\nfrom\n  tpch.partsupp,\n  tpch.supplier,\n  tpch.nation\nwhere\n  ps_suppkey = s_suppkey\n  and s_nationkey = n_nationkey\n  and n_name = 'BRAZIL'\ngroup by\n  ps_partkey having\n    sum(ps_supplycost * ps_availqty) > (\n      select\n        sum(ps_supplycost * ps_availqty) * 0.1\n      from\n        tpch.partsupp,\n        tpch.supplier,\n        tpch.nation\n      where\n        ps_suppkey = s_suppkey\n        and s_nationkey = n_nationkey\n        and n_name = 'BRAZIL'\n    )\norder by\n  value desc;",
    "submitted_query": "WITH total_value AS (\n    SELECT \n        SUM(ps.ps_supplycost * ps.ps_availqty) AS total\n    FROM \n        tpch.partsupp ps\n    INNER JOIN \n        tpch.supplier s ON ps.ps_suppkey = s.s_suppkey\n    INNER JOIN \n        tpch.nation n ON s.s_nationkey = n.n_nationkey\n    WHERE \n        n.n_name = 'BRAZIL'  -- replace with the desired nation name\n),\npart_values AS (\n    SELECT \n        p.p_partkey AS part_number,\n        SUM(ps.ps_supplycost * ps.ps_availqty) AS part_value\n    FROM \n        tpch.partsupp ps\n    INNER JOIN \n        tpch.part p ON ps.ps_partkey = p.p_partkey\n    INNER JOIN \n        tpch.supplier s ON ps.ps_suppkey = s.s_suppkey\n    INNER JOIN \n        tpch.nation n ON s.s_nationkey = n.n_nationkey\n    WHERE \n        n.n_name = 'BRAZIL'  -- replace with the desired nation name\n    GROUP BY \n        p.p_partkey\n)\nSELECT \n    part_number,\n    part_value\nFROM \n    part_values\nWHERE \n    part_value / (SELECT total FROM total_value) > 0.1  -- replace with the desired significant percentage (e.g., 10%)\nORDER BY \n    part_value DESC;"
  },
  {
    "id": "Q12",
    "grade": "Equal",
    "reason": "The answer contains the same data values as the expected result.",
    "reference_query": "select\n  l_shipmode,\n  sum(case\n    when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1\n    else 0\n  end) as high_line_count,\n  sum(case\n    when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1\n    else 0\n  end) as low_line_count\nfrom\n  tpch.orders,\n  tpch.lineitem\nwhere\n  o_orderkey = l_orderkey\n  and l_shipmode in ('TRUCK', 'SHIP')\n  and l_commitdate < l_receiptdate\n  and l_shipdate < l_commitdate\n  and l_receiptdate >= '1995-01-01'\n  and l_receiptdate < '1996-01-01'\ngroup by\n  l_shipmode\norder by\n  l_shipmode;",
    "submitted_query": "SELECT \n    l.l_shipmode,\n    SUM(CASE WHEN o.o_orderpriority IN ('1-URGENT', '2-HIGH') THEN 1 ELSE 0 END) AS high_priority_count,\n    SUM(CASE WHEN o.o_orderpriority NOT IN ('1-URGENT', '2-HIGH') THEN 1 ELSE 0 END) AS low_priority_count\nFROM \n    tpch.lineitem l\nJOIN \n    tpch.orders o ON l.l_orderkey = o.o_orderkey\nWHERE \n    l.l_receiptdate > l.l_commitdate \n    AND l.l_shipdate < l.l_commitdate\n    AND l.l_shipmode IN ('TRUCK', 'SHIP')  -- replace with the two specified ship modes\n    AND l.l_receiptdate >= '1995-01-01'  -- replace with the start date\n    AND l.l_receiptdate < '1996-01-01'  -- replace with the end date\nGROUP BY \n    l.l_shipmode"
  },
  {
    "id": "Q13",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  c_count, count(*) as custdist\nfrom (\n  select\n    c_custkey,\n    count(o_orderkey)\n  from\n    tpch.customer left outer join tpch.orders on c_custkey = o_custkey\n    and o_comment not like \u2018%special%express%interest%\u2019\n  group by\n    c_custkey\n  ) as c_orders (c_custkey, c_count)\ngroup by\n  c_count\norder by\n  custdist desc;",
    "submitted_query": "SELECT \n    NumberOfOrders,\n    COUNT(*) AS NumberOfCustomers\nFROM (\n    SELECT \n        c.c_custkey AS CustomerID,\n        COUNT(o.o_orderkey) AS NumberOfOrders\n    FROM \n        tpch.customer c\n        LEFT JOIN tpch.orders o ON c.c_custkey = o.o_custkey\n        AND o.o_comment NOT LIKE '%special%express%interest%'\n    GROUP BY \n        c.c_custkey\n) AS SubQuery\nGROUP BY \n    NumberOfOrders\nORDER BY \n    NumberOfOrders;"
  },
  {
    "id": "Q14",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  100.00 * sum(case\n    when p_type like 'PROMO%'\n    then l_extendedprice*(1-l_discount)\n    else 0\n    end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue\nfrom\n  tpch.lineitem,\n  tpch.part\nwhere\n  l_partkey = p_partkey\n  and l_shipdate >= '1995-01-01'\n  and l_shipdate < '1995-02-01'",
    "submitted_query": "SELECT \n    SUM(CASE WHEN p_type like 'PROMO%' THEN l_extendedprice * (1 - l_discount) ELSE 0 END) AS PromotionalRevenue,\n    SUM(l_extendedprice * (1 - l_discount)) AS TotalRevenue,\n    (SUM(CASE WHEN p_type like 'PROMO%' THEN l_extendedprice * (1 - l_discount) ELSE 0 END) * 100.0) / \n    SUM(l_extendedprice * (1 - l_discount)) AS PercentageOfPromotionalRevenue\nFROM \n    tpch.lineitem\nWHERE \n    l_shipdate >= '1995-01-01'\n    AND l_shipdate < '1995-02-01'  -- Change this to the desired month"
  },
  {
    "id": "Q15",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "create view revenue1 (supplier_no, total_revenue) as\n  select\n    s_suppkey,\n    sum(l_extendedprice * (1 - l_discount)) as total_revenue\n  from\n     tpch.lineitem\n  where\n    l_shipdate >= '1995-01-01' \n    and l_shipdate < '1995-04-01'  -- Change this to the desired quarter\n  group by\n    l_suppkey;\nselect\n  s_suppkey,\n  s_name,\n  s_address,\n  s_phone,\n  total_revenue\nfrom\n   tpch.supplier,\n  revenue1\nwhere\n  s_suppkey = supplier_no\n  and total_revenue = (\n    select\n      max(total_revenue)\n    from\n      revenue1\n    )\norder by\n  s_suppkey;\n\ndrop view revenue1;",
    "submitted_query": "WITH revenue AS (\n    SELECT \n        l.l_suppkey AS supplier_key,\n        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue\n    FROM \n        tpch.lineitem l\n    WHERE \n        l.l_shipdate >= '1995-01-01' \n        AND l.l_shipdate < '1995-04-01'  -- Change this to the desired quarter\n    GROUP BY \n        l.l_suppkey\n),\nmax_revenue AS (\n    SELECT \n        MAX(revenue) AS max_revenue\n    FROM \n        revenue\n)\nSELECT \n    s.s_suppkey AS supplier_key,\n    s.s_name AS supplier_name,\n    r.revenue\nFROM \n    revenue r\nJOIN \n    tpch.supplier s ON r.supplier_key = s.s_suppkey\nJOIN \n    max_revenue m ON r.revenue = m.max_revenue\nORDER BY \n    s.s_suppkey;"
  },
  {
    "id": "Q16",
    "grade": "Equal",
    "reason": "The answer contains the same data values as the expected result.",
    "reference_query": "select\n  p_brand,\n  p_type,\n  p_size,\n  count(distinct ps_suppkey) as supplier_count\nfrom\n  tpch.partsupp,\n  tpch.part\nwhere\n  ps_partkey = p_partkey\n  and p_brand <> 'Brand#13'\n  and p_type not like 'ECONOMY BRUSHED STEEL'\n  and p_size in (15, 45, 28,41, 7, 17, 16, 33)\n  and ps_suppkey not in (\n    select\n      s_suppkey\n    from\n      tpch.supplier\n    where\n      s_comment like '%complaint%express%interest%'\n    )\ngroup by\n  p_brand,\n  p_type,\n  p_size\norder by\n  p_brand,\n  p_type,\n  p_size;",
    "submitted_query": "SELECT \n    p.p_brand, \n    p.p_type, \n    p.p_size, \n    COUNT(DISTINCT s.s_suppkey) AS supplier_count\nFROM \n    tpch.part p\nJOIN \n    tpch.partsupp ps ON p.p_partkey = ps.ps_partkey\nJOIN \n    tpch.supplier s ON ps.ps_suppkey = s.s_suppkey\nWHERE \n    p.p_size IN (15, 45, 28,41, 7, 17, 16, 33)  -- replace with the desired sizes\n    AND p.p_type NOT IN ('ECONOMY BRUSHED STEEL') \n    AND p.p_brand NOT IN ('Brand#13')\n    AND s.s_name NOT IN (SELECT s_name FROM tpch.supplier WHERE s_comment LIKE '%complaint%express%interest%')\nGROUP BY \n    p.p_brand, \n    p.p_type, \n    p.p_size\nORDER BY \n    supplier_count DESC, \n    p.p_brand ASC, \n    p.p_type ASC, \n    p.p_size ASC;"
  },
  {
    "id": "Q17",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  sum(l_extendedprice) / 7.0 as avg_yearly\nfrom\n  tpch.lineitem,\n  tpch.part\nwhere\n  l_partkey = p_partkey\n  and p_brand = 'BRAND#13'\n  and p_container = 'JUMBO PKG'\n  and l_quantity < (\n    select\n      0.2 * avg(l_quantity)\n    from\n      tpch.lineitem,\n      tpch.part\n    where\n      l_partkey = p_partkey\n    );",
    "submitted_query": "WITH avg_quantity AS (\n    SELECT 0.2 * AVG(l_quantity) AS avg_quantity\n    FROM tpch.lineitem, tpch.part\n    WHERE l_partkey = p_partkey \n      AND p_brand = 'BRAND#13' \n      AND p_container = 'JUMBO PKG'\n)\nSELECT \n    SUM(CASE \n        WHEN l_quantity < (SELECT avg_quantity FROM avg_quantity)\n        THEN l_extendedprice \n        ELSE 0 \n    END) / 7.0 AS avg_yearly_loss\nFROM \n    tpch.lineitem, \n    tpch.part\nWHERE \n    l_partkey = p_partkey \n    AND p_brand = 'BRAND#13' \n    AND p_container = 'JUMBO PKG';"
  },
  {
    "id": "Q18",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  c_name,\n  c_custkey,\n  o_orderkey,\n  o_orderdate,\n  o_totalprice,\n  sum(l_quantity)\nfrom\n  tpch.customer,\n  tpch.orders,\n  tpch.lineitem\nwhere\n  o_orderkey in (\n    select\n      l_orderkey\n    from\n      tpch.lineitem\n    group by\n      l_orderkey having\n        sum(l_quantity) > 100\n  )\n  and c_custkey = o_custkey\n  and o_orderkey = l_orderkey\ngroup by\n  c_name,\n  c_custkey,\n  o_orderkey,\n  o_orderdate,\n  o_totalprice\norder by\n  o_totalprice desc,\n  o_orderdate\nlimit 100;",
    "submitted_query": "SELECT TOP 100 \n    c.c_name AS customer_name, \n    c.c_custkey AS customer_key, \n    o.o_orderkey AS order_key, \n    o.o_orderdate AS order_date, \n    o.o_totalprice AS total_price, \n    SUM(l.l_quantity) AS total_quantity\nFROM \n    tpch.customer c\nINNER JOIN \n    tpch.orders o ON c.c_custkey = o.o_custkey\nINNER JOIN \n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\nGROUP BY \n    c.c_name, c.c_custkey, o.o_orderkey, o.o_orderdate, o.o_totalprice\nHAVING \n    SUM(l.l_quantity) > 100  -- adjust the threshold value as needed\nORDER BY \n    SUM(l.l_quantity) DESC;"
  },
  {
    "id": "Q19",
    "grade": "Incorrect",
    "reason": "The answer is incorrect and has different data from the expected result.",
    "reference_query": "select\n  sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom\n  tpch.lineitem,\n  tpch.part\nwhere\n  (\n    p_partkey = l_partkey\n    and p_brand = 'BRAND#13'\n    and p_container in ( 'SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')\n    and l_quantity >=20 and l_quantity <= 30\n    and p_size between 1 and 5\n    and l_shipmode in ('AIR', 'AIR REG')\n    and l_shipinstruct = 'DELIVER IN PERSON'\n  );",
    "submitted_query": "SELECT \n    SUM(l.l_extendedprice * (1 - l.l_discount)) AS gross_discounted_revenue\nFROM \n    tpch.lineitem l\nJOIN \n    tpch.part p ON l.l_partkey = p.p_partkey\nJOIN \n    tpch.orders o ON l.l_orderkey = o.o_orderkey\nWHERE \n    l.l_shipmode in ('AIR', 'AIR REG')\n    AND l.l_shipinstruct = 'DELIVER IN PERSON'\n    AND l.l_quantity BETWEEN 20 AND 30  -- replace with actual quantity range\n    AND p.p_brand IN ('BRAND#13')\n    AND p.p_container IN ('JUMBO PKG')\n    AND p.p_size BETWEEN 1 AND 5  -- replace with actual size range"
  },
  {
    "id": "Q20",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  s_name,\n  p_address,\nfrom\n  tpch.supplier,\n  tpch.nation\nwhere\n  s_suppkey in (\n    select\n      ps_suppkey\n    from\n      tpch.partsupp,\n      tpch.part\n    where\n      ps_partkey in (\n        select\n          p_partkey\n        from\n          tpch.part\n        where\n          p_name like ''%spring%green%'\n      )\n        and ps_availqty > 0.5 * (\n          select\n            sum(ps_availqty)\n          from\n            tpch.lineitem,\n          where\n            l_partkey = p_partkey\n            and l_suppkey = ps_suppkey\n            and l_shipdate >= '1995-01-01'\n            and l_shipdate < '1996-01-01'\n        )\n    )\n  and s_nationkey = n_nationkey\n  and n_name = 'BRAZIL'\norder by\n  s_name;",
    "submitted_query": "WITH \n  -- Calculate total quantity shipped by each supplier for each part in a given year\n  TotalQuantityShipped AS (\n      SELECT \n          l.l_suppkey AS supplier_key,\n          l.l_partkey AS part_key,\n          YEAR(l.l_shipdate) AS ship_year,\n          SUM(l.l_quantity) AS total_quantity\n      FROM \n          tpch.lineitem l\n      GROUP BY \n          l.l_suppkey, \n          l.l_partkey, \n          YEAR(l.l_shipdate)\n  ),\n  -- Calculate average quantity shipped by each supplier for each part type in a given year\n  AverageQuantityShipped AS (\n      SELECT \n          tqs.supplier_key,\n          tqs.ship_year,\n          p.p_name AS part_name,\n          AVG(tqs.total_quantity) OVER (PARTITION BY tqs.supplier_key, tqs.ship_year, p.p_type) AS avg_quantity\n      FROM \n          TotalQuantityShipped tqs\n      JOIN \n          tpch.part p ON tqs.part_key = p.p_partkey\n  ),\n  -- Calculate excess quantity for each supplier and part\n  ExcessQuantity AS (\n      SELECT \n          ps.ps_suppkey AS supplier_key,\n          ps.ps_partkey AS part_key,\n          ps.ps_availqty AS available_quantity,\n          aqs.avg_quantity,\n          CASE \n              WHEN ps.ps_availqty > aqs.avg_quantity * 0.5 THEN 1 \n              ELSE 0 \n          END AS is_excess\n      FROM \n          tpch.partsupp ps\n      JOIN \n          AverageQuantityShipped aqs ON ps.ps_suppkey = aqs.supplier_key AND ps.ps_partkey = aqs.part_key\n  ),\n  -- Filter suppliers with excess quantity and same naming convention\n  SuppliersWithExcess AS (\n      SELECT \n          eq.supplier_key,\n          eq.part_key,\n          eq.available_quantity,\n          eq.avg_quantity,\n          eq.is_excess,\n          p.p_name AS part_name\n      FROM \n          ExcessQuantity eq\n      JOIN \n          tpch.part p ON eq.part_key = p.p_partkey\n      WHERE \n          eq.is_excess = 1 \n          AND p.p_name LIKE '%spring%green%'  -- replace with the actual naming convention\n  )\n  -- Select suppliers with excess quantity\n  SELECT \n      s.s_name AS supplier_name,\n      p.p_name AS part_name,\n      swe.available_quantity,\n      swe.avg_quantity\n  FROM \n      SuppliersWithExcess swe\n  JOIN \n      tpch.supplier s ON swe.supplier_key = s.s_suppkey\n  JOIN \n      tpch.part p ON swe.part_key = p.p_partkey\n  WHERE \n      s.s_nationkey = (SELECT n_nationkey FROM tpch.nation WHERE n_name = 'BRAZIL')  -- replace 'given_nation' with the actual nation name\n      AND YEAR(swe.ship_year) = 1995  -- replace with the actual year"
  },
  {
    "id": "Q21",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  s_name,\n  count(*) as numwait\nfrom\n  tpch.supplier,\n  tpch.lineitem l1,\n  tpch.orders,\n  tpch.nation\nwhere\n  s_suppkey = l1.l_suppkey\n  and o_orderkey = l1.l_orderkey\n  and o_orderstatus = 'F'\n  and l1.l_receiptdate > l1.l_commitdate\n  and exists (\n    select\n      *\n    from\n      tpch.lineitem l2\n    where\n      l2.l_orderkey = l1.l_orderkey\n      and l2.l_suppkey <> l1.l_suppkey\n    )\n  and s_nationkey = n_nationkey\n  and n_name = 'BRAZIL'\n  and not exists (\n    select\n      *\n    from\n      tpch.lineitem l3\n    where\n      l3.l_orderkey = l1.l_orderkey\n      and l3.l_suppkey <> l1.l_suppkey\n      and l3.l_receiptdate > l3.l_commitdate\n    )\ngroup by\n  s_name\norder by\n  numwait desc,\n  s_name\nlimit 100;",
    "submitted_query": "WITH failed_suppliers AS (\n    SELECT \n        l.l_suppkey,\n        l.l_orderkey,\n        l.l_commitdate,\n        l.l_receiptdate\n    FROM \n        tpch.lineitem l\n    WHERE \n        l.l_receiptdate > l.l_commitdate\n),\nmulti_supplier_orders AS (\n    SELECT \n        l.l_orderkey\n    FROM \n        tpch.lineitem l\n    GROUP BY \n        l.l_orderkey\n    HAVING \n        COUNT(DISTINCT l.l_suppkey) > 1\n),\nfailed_suppliers_in_multi_orders AS (\n    SELECT \n        fs.l_suppkey,\n        fs.l_orderkey\n    FROM \n        failed_suppliers fs\n    WHERE \n        fs.l_orderkey IN (SELECT l_orderkey FROM multi_supplier_orders)\n    AND \n        fs.l_orderkey NOT IN (\n            SELECT \n                l.l_orderkey\n            FROM \n                tpch.lineitem l\n            WHERE \n                l.l_receiptdate <= l.l_commitdate\n                AND l.l_orderkey IN (SELECT l_orderkey FROM multi_supplier_orders)\n        )\n)\nSELECT \n    s.s_name,\n    n.n_name\nFROM \n    failed_suppliers_in_multi_orders fs\nJOIN \n    tpch.supplier s ON fs.l_suppkey = s.s_suppkey\nJOIN \n    tpch.nation n ON s.s_nationkey = n.n_nationkey\nWHERE \n    n.n_name = 'BRAZIL'  -- replace with the desired nation name\nAND \n    fs.l_orderkey IN (\n        SELECT \n            o_orderkey\n        FROM \n            tpch.orders\n        WHERE \n            o_orderstatus = 'F'\n    );"
  },
  {
    "id": "Q22",
    "grade": "Incorrect",
    "reason": "One or both queries failed to execute",
    "reference_query": "select\n  entrycode,\n  count(*) as numcust,\n  sum(c_acctbal) as totacctbal\nfrom\n(\n  select\n    substring(c_phone from 1 for 2) as cntrycode,\n    c_acctbal\n  from\n    tpch.customer\n  where\n    substring(c_phone from 1 for 2) in\n      ('10', '11')\n    and c_acctbal > (\n      select\n        avg(c_acctbal)\n      from\n        tpch.customer\n      where\n        substring(c_phone from 1 for 2) in\n          ('10', '11')\n    )\n    and not exists (\n      select\n        *\n      from\n        tpch.orders\n      where\n        o_custkey = c_custkey\n    ) \n) as custsale\ngroup by\n  entrycode\norder by\n  entrycode;",
    "submitted_query": "WITH \n  -- Calculate the average account balance of all customers\n  avg_balance AS (\n      SELECT AVG(c_acctbal) AS avg_acctbal\n      FROM tpch.customer\n      WHERE c_acctbal > 0\n  ),\n  -- Find the customers who have not placed orders for 7 years\n  inactive_customers AS (\n      SELECT c.c_custkey, c.c_acctbal, LEFT(c.c_phone, 2) AS country_code\n      FROM tpch.customer c\n      LEFT JOIN tpch.orders o ON c.c_custkey = o.o_custkey\n      WHERE (o.o_orderkey IS NULL OR o.o_orderdate < DATEADD(year, -7, GETDATE()))\n      AND c.c_acctbal > 0\n  ),\n  -- Filter the customers by country code and account balance\n  filtered_customers AS (\n      SELECT ic.c_custkey, ic.c_acctbal, ic.country_code\n      FROM inactive_customers ic\n      CROSS JOIN avg_balance ab\n      WHERE ic.country_code BETWEEN '10' AND '11'  -- Replace with your specific country code range\n      AND ic.c_acctbal > ab.avg_acctbal\n  )\n  -- Count the number of customers and calculate the magnitude of their account balance\n  SELECT \n      COUNT(fc.c_custkey) AS customer_count,\n      SUM(fc.c_acctbal) AS total_balance\n  FROM filtered_customers fc;"
  }
]