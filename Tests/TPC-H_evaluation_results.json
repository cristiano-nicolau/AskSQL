[
    {
        "id": "Q1",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  l_returnflag,\n  l_linestatus,\n  sum(l_quantity) as sum_qty,\n  sum(l_extendedprice) as sum_base_price,\n  sum(l_extendedprice*(1-l_discount)) as sum_disc_price,\n  sum(l_extendedprice*(1-l_discount)*(1+l_tax)) as sum_charge,\n  avg(l_quantity) as avg_qty,\n  avg(l_extendedprice) as avg_price,\n  avg(l_discount) as avg_disc,\n  count(*) as count_order\nfrom\n   tpch.lineitem\nwhere\n    l_shipdate BETWEEN DATEADD(day, -120, (SELECT MAX(l_shipdate) FROM tpch.lineitem)) \n                    AND DATEADD(day, -60, (SELECT MAX(l_shipdate) FROM tpch.lineitem))\ngroup by\n  l_returnflag,\n  l_linestatus\norder by\n  l_returnflag,\n  l_linestatus;",
        "submitted_query": "SELECT \n    l_returnflag,\n    l_linestatus,\n    COUNT(*) AS count,\n    SUM(l_quantity) AS sum_quantity,\n    SUM(l_extendedprice) AS extended_price,\n    SUM(l_extendedprice * (1 - l_discount)) AS discounted_extended_price,\n    SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS discounted_extended_price_plus_tax,\n    AVG(l_quantity) AS average_quantity,\n    AVG(l_extendedprice) AS average_extended_price,\n    AVG(l_discount) AS average_discount\nFROM \n    tpch.lineitem\nWHERE \n    l_shipdate BETWEEN DATEADD(day, -120, (SELECT MAX(l_shipdate) FROM tpch.lineitem)) \n                    AND DATEADD(day, -60, (SELECT MAX(l_shipdate) FROM tpch.lineitem))\nGROUP BY \n    l_returnflag,\n    l_linestatus\nORDER BY \n    l_returnflag,\n    l_linestatus;"
    },
    {
        "id": "Q2",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  s_acctbal,\n  s_name,\n  n_name,\n  p_partkey,\n  p_mfgr,\n  s_address,\n  s_phone,\n  s_comment\nfrom\n  tpch.supplier,\n  tpch.partsupp,\n  tpch.part,\n  tpch.nation,\n  tpch.region\nwhere\n  p_partkey = ps_partkey\n  and s_suppkey = ps_suppkey\n  and p_size = 5\n  and p_type like '%PROMO%'\n  and s_nationkey = n_nationkey\n  and n_regionkey = r_regionkey\n  and r_name = 'AFRICA'\n  and ps_supplycost = (\n    select\n      min(ps_supplycost)\n    from\n      tpch.partsupp, tpch.supplier,\n      tpch.nation, tpch.region\n    where\n      p_partkey = ps_partkey\n      and s_suppkey = ps_suppkey\n      and s_nationkey = n_nationkey\n      and n_regionkey = r_regionkey\n      and r_name = 'AFRICA'\n    )\norder by\n  s_acctbal desc,\n  n_name,\n  s_name,\n  p_partkey;",
        "submitted_query": "WITH RankedSuppliers AS (\n    SELECT \n        s.s_acctbal,\n        s.s_name,\n        n.n_name AS nation,\n        p.p_partkey,\n        p.p_mfgr,\n        s.s_address,\n        s.s_phone,\n        s.s_comment,\n        ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost, s.s_acctbal DESC) AS row_num\n    FROM \n        tpch.supplier s\n    JOIN \n        tpch.nation n ON s.s_nationkey = n.n_nationkey\n    JOIN \n        tpch.partsupp ps ON s.s_suppkey = ps.ps_suppkey\n    JOIN \n        tpch.part p ON ps.ps_partkey = p.p_partkey\n    JOIN \n        tpch.region r ON n.n_regionkey = r.r_regionkey\n    WHERE \n        r.r_name = 'AFRICA'\n        AND p.p_size = 5\n        AND p.p_type LIKE '%PROMO%'\n)\nSELECT \n    s_acctbal,\n    s_name,\n    nation,\n    p_partkey,\n    p_mfgr,\n    s_address,\n    s_phone,\n    s_comment\nFROM \n    RankedSuppliers\nWHERE \n    row_num = 1\nORDER BY \n    s_acctbal DESC\nOFFSET 0 ROWS\nFETCH NEXT 100 ROWS ONLY;"
    },
    {
        "id": "Q3",
        "grade": "Correct+",
        "reason": "The answer contains all expected data plus additional columns.",
        "reference_query": "select top 10\n  l_orderkey,\n  sum(l_extendedprice * (1 - l_discount)) as revenue,\n  o_orderpriority\nfrom\n  tpch.customer,\n  tpch.orders,\n  tpch.lineitem\nwhere\n  c_mktsegment = 'BUILDING'\n  and c_custkey = o_custkey\n  and l_orderkey = o_orderkey\n  and o_orderdate < '1995-01-01'\n  and l_shipdate > '1995-01-01'\ngroup by\n  l_orderkey,\n  o_orderpriority\norder by\n  revenue desc,\n  o_orderpriority;",
        "submitted_query": "SELECT TOP 10\n    o.o_shippriority,\n    SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,\n    o.o_orderpriority,\n    l.l_orderkey\nFROM\n    tpch.orders o\nINNER JOIN\n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\nINNER JOIN\n    tpch.customer c ON o.o_custkey = c.c_custkey\nWHERE\n    c.c_mktsegment = 'BUILDING'\n    AND o.o_orderdate < '1995-01-01'\n    AND l.l_shipdate > '1995-01-01'\nGROUP BY\n    o.o_shippriority,\n    o.o_orderpriority,\n    l.l_orderkey\nORDER BY\n    revenue DESC,\n    o.o_orderpriority;"
    },
    {
        "id": "Q4",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  o_orderpriority,\n  count(*) as order_count\nfrom\n  tpch.orders\nwhere\n  o_orderdate >= '1992-01-01'\n  and o_orderdate < '1992-04-01'\n  and exists (\n    select\n      *\n    from\n      tpch.lineitem\n    where\n      l_orderkey = o_orderkey\n      and l_commitdate < l_receiptdate\n    )\ngroup by\n  o_orderpriority\norder by\n  o_orderpriority;",
        "submitted_query": "SELECT \n    o.o_orderpriority, \n    COUNT(DISTINCT o.o_orderkey) AS count\nFROM \n    tpch.orders o\nJOIN \n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\nWHERE \n    l.l_receiptdate > l.l_commitdate\n    AND o.o_orderdate >= '1992-01-01'  -- first quarter of 1992\n    AND o.o_orderdate < '1992-04-01'  -- first quarter of 1992\nGROUP BY \n    o.o_orderpriority\nORDER BY \n    o.o_orderpriority ASC;"
    },
    {
        "id": "Q5",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  n_name,\n  sum(l_extendedprice * (1 - l_discount)) as revenue  \nfrom\n  tpch.customer,\n  tpch.orders,\n  tpch.lineitem,\n  tpch.supplier,\n  tpch.nation,\n  tpch.region\nwhere\n  c_custkey = o_custkey\n  and l_orderkey = o_orderkey\n  and l_suppkey = s_suppkey\n  and c_nationkey = s_nationkey\n  and s_nationkey = n_nationkey\n  and n_regionkey = r_regionkey\n  and r_name = 'AMERICA'\n  and o_orderdate >= '1995-01-01' \n  and o_orderdate < '1996-01-01' \ngroup by\n  n_name\norder by\n  revenue desc;",
        "submitted_query": "SELECT \n    cn.n_name AS nation, \n    SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue_volume\nFROM \n    tpch.lineitem l\nINNER JOIN \n    tpch.orders o ON l.l_orderkey = o.o_orderkey\nINNER JOIN \n    tpch.customer c ON o.o_custkey = c.c_custkey\nINNER JOIN \n    tpch.nation cn ON c.c_nationkey = cn.n_nationkey\nINNER JOIN \n    tpch.supplier s ON l.l_suppkey = s.s_suppkey\nINNER JOIN \n    tpch.nation sn ON s.s_nationkey = sn.n_nationkey\nINNER JOIN \n    tpch.region r ON cn.n_regionkey = r.r_regionkey\nWHERE \n    r.r_name = 'AMERICA'\n    AND o.o_orderdate >= '1995-01-01'\n    AND o.o_orderdate < '1996-01-01'\n    AND cn.n_name = sn.n_name\nGROUP BY \n    cn.n_name\nORDER BY \n    revenue_volume DESC;"
    },
    {
        "id": "Q6",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "SELECT  \n    SUM(l.l_extendedprice * l.l_discount) AS revenue\nFROM  \n    tpch.lineitem l\nJOIN  \n    tpch.partsupp p ON l.l_partkey = p.ps_partkey\nWHERE  \n    l.l_shipdate >= '1992-01-01'\n    AND l.l_shipdate < '1993-01-01'\n    AND l.l_discount BETWEEN 0 AND 0.02\n    AND l.l_quantity < p.ps_availqty;",
        "submitted_query": "SELECT \n    SUM(l.l_extendedprice * l.l_discount) AS potential_revenue_increase\nFROM \n    tpch.lineitem l\nJOIN \n    tpch.partsupp p ON l.l_partkey = p.ps_partkey\nWHERE \n    l.l_shipdate >= '1992-01-01' \n    AND l.l_shipdate < '1993-01-01' \n    AND l.l_discount BETWEEN 0 and 0.02\n    AND l.l_quantity < p.ps_availqty;"
    },
    {
        "id": "Q7",
        "grade": "Correct-",
        "reason": "The answer contains most of the same numeric values.",
        "reference_query": "SELECT  \n    supp_nation,  \n    cust_nation,  \n    l_year,  \n    SUM(volume) AS revenue\nFROM  \n(\n    SELECT  \n        n1.n_name AS supp_nation,  \n        n2.n_name AS cust_nation,  \n        YEAR(l.l_shipdate) AS l_year,  \n        l.l_extendedprice * (1 - l.l_discount) AS volume\n    FROM  \n        tpch.part p,\n        tpch.supplier s,\n        tpch.lineitem l,\n        tpch.orders o,\n        tpch.customer c,\n        tpch.nation n1,\n        tpch.nation n2\n    WHERE  \n        s.s_suppkey = l.l_suppkey\n        AND c.c_custkey = o.o_custkey\n        AND o.o_orderkey = l.l_orderkey\n        AND p.p_partkey = l.l_partkey\n        AND s.s_nationkey = n1.n_nationkey\n        AND c.c_nationkey = n2.n_nationkey\n        AND (\n            (n1.n_name = 'BRAZIL' AND n2.n_name = 'CANADA') OR \n            (n1.n_name = 'CANADA' AND n2.n_name = 'BRAZIL')\n        )\n        AND l.l_shipdate BETWEEN '1995-01-01' AND '1996-12-31'\n) AS shipping\nGROUP BY  \n    supp_nation,  \n    cust_nation,  \n    l_year\nORDER BY  \n    supp_nation,  \n    cust_nation,  \n    l_year;",
        "submitted_query": "SELECT \n      n1.n_name AS supplier_nation,\n      n2.n_name AS customer_nation,\n      YEAR(l.l_shipdate) AS year,\n      SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue\n  FROM \n      tpch.lineitem l\n  JOIN \n      tpch.supplier s ON l.l_suppkey = s.s_suppkey\n  JOIN \n      tpch.nation n1 ON s.s_nationkey = n1.n_nationkey\n  JOIN \n      tpch.orders o ON l.l_orderkey = o.o_orderkey\n  JOIN \n      tpch.customer c ON o.o_custkey = c.c_custkey\n  JOIN \n      tpch.nation n2 ON c.c_nationkey = n2.n_nationkey\n  WHERE \n      (n1.n_name = 'BRAZIL' AND n2.n_name = 'CANADA') OR \n      (n1.n_name = 'CANADA' AND n2.n_name = 'BRAZIL')\n      AND l.l_shipdate BETWEEN '1995-01-01' AND '1996-12-31'\n  GROUP BY \n      n1.n_name, n2.n_name, YEAR(l.l_shipdate)\n  ORDER BY \n      n1.n_name, n2.n_name, YEAR(l.l_shipdate);"
    },
    {
        "id": "Q8",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "WITH revenue AS (\n    SELECT \n        YEAR(o.o_orderdate) AS year,\n        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue\n    FROM \n        tpch.lineitem l\n    INNER JOIN \n        tpch.orders o ON l.l_orderkey = o.o_orderkey\n    INNER JOIN \n        tpch.part p ON l.l_partkey = p.p_partkey\n    WHERE \n        o.o_orderdate BETWEEN '1995-01-01' AND '1996-12-31'\n        AND p.p_type = 'SMALL PLATED COPPER'\n    GROUP BY \n        YEAR(o.o_orderdate)\n),\nnation_revenue AS (\n    SELECT \n        YEAR(o.o_orderdate) AS year,\n        SUM(l.l_extendedprice * (1 - l.l_discount)) AS nation_revenue\n    FROM \n        tpch.lineitem l\n    INNER JOIN \n        tpch.orders o ON l.l_orderkey = o.o_orderkey\n    INNER JOIN \n        tpch.part p ON l.l_partkey = p.p_partkey\n    INNER JOIN \n        tpch.supplier s ON l.l_suppkey = s.s_suppkey\n    INNER JOIN \n        tpch.nation n ON s.s_nationkey = n.n_nationkey\n    WHERE \n        n.n_name = 'BRAZIL'\n        AND o.o_orderdate BETWEEN '1995-01-01' AND '1996-12-31'\n        AND p.p_type = 'SMALL PLATED COPPER'\n    GROUP BY \n        YEAR(o.o_orderdate)\n)\nSELECT \n    nr.year,\n    nr.nation_revenue / r.total_revenue AS market_share\nFROM \n    nation_revenue nr\nINNER JOIN \n    revenue r ON nr.year = r.year\nORDER BY \n    nr.year;",
        "submitted_query": "WITH revenue AS (\n    SELECT \n        YEAR(o.o_orderdate) AS year,\n        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue\n    FROM \n        tpch.lineitem l\n    INNER JOIN \n        tpch.orders o ON l.l_orderkey = o.o_orderkey\n    INNER JOIN \n        tpch.part p ON l.l_partkey = p.p_partkey\n    WHERE \n        o.o_orderdate BETWEEN '1995-01-01' AND '1996-12-31'\n        AND p.p_type = 'SMALL PLATED COPPER'\n    GROUP BY \n        YEAR(o.o_orderdate)\n),\nnation_revenue AS (\n    SELECT \n        YEAR(o.o_orderdate) AS year,\n        SUM(l.l_extendedprice * (1 - l.l_discount)) AS nation_revenue\n    FROM \n        tpch.lineitem l\n    INNER JOIN \n        tpch.orders o ON l.l_orderkey = o.o_orderkey\n    INNER JOIN \n        tpch.part p ON l.l_partkey = p.p_partkey\n    INNER JOIN \n        tpch.supplier s ON l.l_suppkey = s.s_suppkey\n    INNER JOIN \n        tpch.nation n ON s.s_nationkey = n.n_nationkey\n    WHERE \n        n.n_name = 'BRAZIL'\n        AND o.o_orderdate BETWEEN '1995-01-01' AND '1996-12-31'\n        AND p.p_type = 'SMALL PLATED COPPER'\n    GROUP BY \n        YEAR(o.o_orderdate)\n)\nSELECT \n    nr.year,\n    nr.nation_revenue / r.total_revenue AS market_share\nFROM \n    nation_revenue nr\nINNER JOIN \n    revenue r ON nr.year = r.year\nORDER BY \n    nr.year;"
    },
    {
        "id": "Q9",
        "grade": "Incorrect",
        "reason": "The answer is incorrect and has different data from the expected result.",
        "reference_query": "select\n  nation,\n  o_year,\n  sum(amount) as sum_profit\nfrom\n  (\n    select\n      n_name as nation,\n      YEAR(o_orderdate) as o_year,\n      ((l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity)) as amount\n    from\n      tpch.part,\n      tpch.supplier,\n      tpch.lineitem,\n      tpch.orders,\n      tpch.partsupp,\n      tpch.nation\n    where\n      s_suppkey = l_suppkey\n      and ps_suppkey = s_suppkey\n      and ps_partkey = p_partkey\n      and l_orderkey = o_orderkey\n      and s_nationkey = n_nationkey\n      and p_name like '%spring%green%yellow%'\n    )\n  as profit\ngroup by\n  nation,\n  o_year\norder by\n  nation,\n  o_year desc;",
        "submitted_query": "SELECT \n    n.n_name AS nation,\n    r.r_name AS region,\n    YEAR(o.o_orderdate) AS o_year,\n    p.p_type AS product_type,\n    SUM((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) AS sum_profit\nFROM \n    tpch.lineitem l\nINNER JOIN \n    tpch.orders o ON l.l_orderkey = o.o_orderkey\nINNER JOIN \n    tpch.part p ON l.l_partkey = p.p_partkey\nINNER JOIN \n    tpch.partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey\nINNER JOIN \n    tpch.supplier s ON ps.ps_suppkey = s.s_suppkey\nINNER JOIN \n    tpch.nation n ON s.s_nationkey = n.n_nationkey\nINNER JOIN \n    tpch.region r ON n.n_regionkey = r.r_regionkey\nWHERE \n    p.p_name LIKE '%spring%green%yellow%'\nGROUP BY \n    n.n_name,\n    r.r_name,\n    YEAR(o.o_orderdate),\n    p.p_type\nORDER BY \n    n.n_name,\n    r.r_name,\n    YEAR(o.o_orderdate) DESC;"
    },
    {
        "id": "Q10",
        "grade": "Correct-",
        "reason": "The data contains most of the same numeric values but in different structure.",
        "reference_query": "select\n  c_custkey,\n  c_name,\n  c_address,\n  c_nationkey,\n  c_phone,\n  c_acctbal,\n  c_comment,\n  sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom\n  tpch.customer,\n  tpch.orders,\n  tpch.lineitem,\n  tpch.nation\nwhere\n  c_custkey = o_custkey\n  and l_orderkey = o_orderkey\n  and o_orderdate between '1993-01-01' and '1993-04-01'\n  and l_returnflag = 'R'\n  and c_nationkey = n_nationkey\ngroup by\n  c_custkey,\n  c_name,\n  c_address,\n  c_nationkey,\n  c_phone,\n  c_acctbal,\n  c_comment\norder by\n  revenue desc;",
        "submitted_query": "SELECT\n    c.c_name, \n    c.c_address, \n    n.n_name, \n    c.c_phone, \n    c.c_acctbal, \n    c.c_comment, \n    SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue_lost\nFROM \n    tpch.customer c\nJOIN \n    tpch.orders o ON c.c_custkey = o.o_custkey\nJOIN \n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\nJOIN \n    tpch.nation n ON c.c_nationkey = n.n_nationkey\nWHERE \n    l.l_returnflag = 'R' \n    AND o.o_orderdate >= '1993-01-01' \n    AND o.o_orderdate < '1993-04-01'  -- Change this to the desired quarter\nGROUP BY \n    c.c_name, \n    c.c_address, \n    n.n_name, \n    c.c_phone, \n    c.c_acctbal, \n    c.c_comment\nORDER BY \n    revenue_lost DESC;"
    },
    {
        "id": "Q11",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  ps_partkey,\n  sum(ps_supplycost * ps_availqty) as value\nfrom\n  tpch.partsupp,\n  tpch.supplier,\n  tpch.nation\nwhere\n  ps_suppkey = s_suppkey\n  and s_nationkey = n_nationkey\n  and n_name = 'BRAZIL'\ngroup by\n  ps_partkey having\n    sum(ps_supplycost * ps_availqty) > (\n      select\n        sum(ps_supplycost * ps_availqty) * 0.01\n      from\n        tpch.partsupp,\n        tpch.supplier,\n        tpch.nation\n      where\n        ps_suppkey = s_suppkey\n        and s_nationkey = n_nationkey\n        and n_name = 'BRAZIL'\n    )\norder by\n  value desc;",
        "submitted_query": "WITH total_value AS (\n    SELECT \n        SUM(ps.ps_supplycost * ps.ps_availqty) AS total\n    FROM \n        tpch.partsupp ps\n    INNER JOIN \n        tpch.supplier s ON ps.ps_suppkey = s.s_suppkey\n    INNER JOIN \n        tpch.nation n ON s.s_nationkey = n.n_nationkey\n    WHERE \n        n.n_name = 'BRAZIL'  -- replace with the desired nation name\n),\npart_values AS (\n    SELECT \n        p.p_partkey AS part_number,\n        SUM(ps.ps_supplycost * ps.ps_availqty) AS part_value\n    FROM \n        tpch.partsupp ps\n    INNER JOIN \n        tpch.part p ON ps.ps_partkey = p.p_partkey\n    INNER JOIN \n        tpch.supplier s ON ps.ps_suppkey = s.s_suppkey\n    INNER JOIN \n        tpch.nation n ON s.s_nationkey = n.n_nationkey\n    WHERE \n        n.n_name = 'BRAZIL'  -- replace with the desired nation name\n    GROUP BY \n        p.p_partkey\n)\nSELECT \n    part_number,\n    part_value\nFROM \n    part_values\nWHERE \n    part_value / (SELECT total FROM total_value) > 0.01  -- replace with the desired significant percentage (e.g., 10%)\nORDER BY \n    part_value DESC;"
    },
    {
        "id": "Q12",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  l_shipmode,\n  sum(case\n    when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1\n    else 0\n  end) as high_line_count,\n  sum(case\n    when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1\n    else 0\n  end) as low_line_count\nfrom\n  tpch.orders,\n  tpch.lineitem\nwhere\n  o_orderkey = l_orderkey\n  and l_shipmode in ('TRUCK', 'SHIP')\n  and l_commitdate < l_receiptdate\n  and l_shipdate < l_commitdate\n  and l_receiptdate >= '1995-01-01'\n  and l_receiptdate < '1996-01-01'\ngroup by\n  l_shipmode\norder by\n  l_shipmode;",
        "submitted_query": "SELECT \n    l.l_shipmode,\n    SUM(CASE WHEN o.o_orderpriority IN ('1-URGENT', '2-HIGH') THEN 1 ELSE 0 END) AS high_priority_count,\n    SUM(CASE WHEN o.o_orderpriority NOT IN ('1-URGENT', '2-HIGH') THEN 1 ELSE 0 END) AS low_priority_count\nFROM \n    tpch.lineitem l\nJOIN \n    tpch.orders o ON l.l_orderkey = o.o_orderkey\nWHERE \n    l.l_receiptdate > l.l_commitdate \n    AND l.l_shipdate < l.l_commitdate\n    AND l.l_shipmode IN ('TRUCK', 'SHIP')  -- replace with the two specified ship modes\n    AND l.l_receiptdate >= '1995-01-01'  -- replace with the start date\n    AND l.l_receiptdate < '1996-01-01'  -- replace with the end date\nGROUP BY \n    l.l_shipmode"
    },
    {
        "id": "Q13",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  c_count, count(*) as custdist\nfrom (\n  select\n    c_custkey,\n    count(o_orderkey)\n  from\n    tpch.customer left outer join tpch.orders on c_custkey = o_custkey\n    and o_comment not like '%special%express%interest%'\n  group by\n    c_custkey\n  ) as c_orders (c_custkey, c_count)\ngroup by\n  c_count\norder by\n  custdist desc;",
        "submitted_query": "SELECT \n    NumberOfOrders,\n    COUNT(*) AS NumberOfCustomers\nFROM (\n    SELECT \n        c.c_custkey AS CustomerID,\n        COUNT(o.o_orderkey) AS NumberOfOrders\n    FROM \n        tpch.customer c\n        LEFT JOIN tpch.orders o ON c.c_custkey = o.o_custkey\n        AND o.o_comment NOT LIKE '%special%express%interest%'\n    GROUP BY \n        c.c_custkey\n) AS SubQuery\nGROUP BY \n    NumberOfOrders\nORDER BY \n    NumberOfOrders;"
    },
    {
        "id": "Q14",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  100 * sum(case\n    when p_type like 'PROMO BURNISHED STEEL'\n    then l_extendedprice*(1-l_discount)\n    else 0\n    end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue\nfrom\n  tpch.lineitem,\n  tpch.part\nwhere\n  l_partkey = p_partkey\n  and l_shipdate >= '1995-01-01'\n  and l_shipdate < '1995-02-01'",
        "submitted_query": "SELECT \n    100 * SUM(CASE WHEN p.p_type LIKE 'PROMO BURNISHED STEEL' THEN l.l_extendedprice * (1 - l.l_discount) ELSE 0 END) / \n    SUM(l.l_extendedprice * (1 - l.l_discount)) AS promo_revenue_percentage\nFROM \n    tpch.lineitem l\nJOIN \n    tpch.part p ON l.l_partkey = p.p_partkey\nWHERE \n    l.l_shipdate >= '1995-01-01' AND l.l_shipdate < '1995-02-01';"
    },
    {
        "id": "Q15",
        "grade": "Correct-",
        "reason": "The numeric values match closely but presentation differs.",
        "reference_query": "SELECT \n    s.s_suppkey, \n    s.s_name, \n    s.s_address, \n    s.s_phone, \n    r.total_revenue\nFROM \n    tpch.supplier s\nJOIN \n    (\n        SELECT \n            l_suppkey AS s_suppkey, \n            SUM(l_extendedprice * (1 - l_discount)) AS total_revenue \n        FROM \n            tpch.lineitem \n        WHERE \n            l_shipdate >= '1995-01-01' \n            AND l_shipdate < '1995-04-01' \n        GROUP BY \n            l_suppkey\n    ) AS r ON s.s_suppkey = r.s_suppkey\nWHERE \n    r.total_revenue = (\n        SELECT \n            MAX(total_revenue)\n        FROM \n            (\n                SELECT \n                    l_suppkey AS s_suppkey, \n                    SUM(l_extendedprice * (1 - l_discount)) AS total_revenue \n                FROM \n                    tpch.lineitem \n                WHERE \n                    l_shipdate >= '1995-01-01' \n                    AND l_shipdate < '1995-04-01' \n                GROUP BY \n                    l_suppkey\n            ) AS inner_r\n    )\nORDER BY \n    s.s_suppkey;",
        "submitted_query": "WITH revenue AS (\n    SELECT \n        l.l_suppkey AS supplier_key,\n        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue\n    FROM \n        tpch.lineitem l\n    WHERE \n        l.l_shipdate >= '1995-01-01' \n        AND l.l_shipdate < '1995-04-01'  -- Change this to the desired quarter\n    GROUP BY \n        l.l_suppkey\n),\nmax_revenue AS (\n    SELECT \n        MAX(revenue) AS max_revenue\n    FROM \n        revenue\n)\nSELECT \n    s.s_suppkey AS supplier_key,\n    s.s_name AS supplier_name,\n    r.revenue\nFROM \n    revenue r\nJOIN \n    tpch.supplier s ON r.supplier_key = s.s_suppkey\nJOIN \n    max_revenue m ON r.revenue = m.max_revenue\nORDER BY \n    s.s_suppkey;"
    },
    {
        "id": "Q16",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  p_brand,\n  p_type,\n  p_size,\n  count(distinct ps_suppkey) as supplier_count\nfrom\n  tpch.partsupp,\n  tpch.part\nwhere\n  ps_partkey = p_partkey\n  and p_brand <> 'Brand#13'\n  and p_type not like 'ECONOMY BRUSHED STEEL'\n  and p_size in (15, 45, 28,41, 7, 17, 16, 33)\n  and ps_suppkey not in (\n    select\n      s_suppkey\n    from\n      tpch.supplier\n    where\n      s_comment like '%complaint%express%interest%'\n    )\ngroup by\n  p_brand,\n  p_type,\n  p_size\norder by\n  p_brand,\n  p_type,\n  p_size;",
        "submitted_query": "SELECT \n    p.p_brand, \n    p.p_type, \n    p.p_size, \n    COUNT(DISTINCT s.s_suppkey) AS supplier_count\nFROM \n    tpch.part p\nJOIN \n    tpch.partsupp ps ON p.p_partkey = ps.ps_partkey\nJOIN \n    tpch.supplier s ON ps.ps_suppkey = s.s_suppkey\nWHERE \n    p.p_size IN (15, 45, 28,41, 7, 17, 16, 33)  -- replace with the desired sizes\n    AND p.p_type NOT IN ('ECONOMY BRUSHED STEEL') \n    AND p.p_brand NOT IN ('Brand#13')\n    AND s.s_name NOT IN (SELECT s_name FROM tpch.supplier WHERE s_comment LIKE '%complaint%express%interest%')\nGROUP BY \n    p.p_brand, \n    p.p_type, \n    p.p_size\nORDER BY \n    supplier_count DESC, \n    p.p_brand ASC, \n    p.p_type ASC, \n    p.p_size ASC;"
    },
    {
        "id": "Q17",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  sum(l_extendedprice) / 7.0 as avg_yearly\nfrom\n  tpch.lineitem,\n  tpch.part\nwhere\n  l_partkey = p_partkey\n  and p_brand = 'BRAND#13'\n  and p_container = 'JUMBO PKG'\n  and l_quantity < (\n    select\n      0.2 * avg(l_quantity)\n    from\n      tpch.lineitem,\n      tpch.part\n    where\n      l_partkey = p_partkey\n    );",
        "submitted_query": "WITH average_quantity AS (\n  SELECT AVG(l.l_quantity) AS avg_quantity\n  FROM tpch.lineitem l\n  JOIN tpch.part p ON l.l_partkey = p.p_partkey\n  WHERE p.p_brand = 'BRAND#13' AND p.p_container = 'JUMBO PKG'\n),\nloss_revenue AS (\n  SELECT \n    SUM(CASE WHEN l.l_quantity < 0.2 * aq.avg_quantity THEN l.l_extendedprice ELSE 0 END) AS loss\n  FROM tpch.lineitem l\n  JOIN tpch.part p ON l.l_partkey = p.p_partkey\n  CROSS JOIN average_quantity aq\n  WHERE p.p_brand = 'BRAND#13' AND p.p_container = 'JUMBO PKG'\n)\nSELECT \n  loss / 7.0 AS avg_yearly_loss\nFROM loss_revenue;"
    },
    {
        "id": "Q18",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select top 100\n  c_name,\n  c_custkey,\n  o_orderkey,\n  o_orderdate,\n  o_totalprice,\n  sum(l_quantity)\nfrom\n  tpch.customer,\n  tpch.orders,\n  tpch.lineitem\nwhere\n  o_orderkey in (\n    select\n      l_orderkey\n    from\n      tpch.lineitem\n    group by\n      l_orderkey having\n        sum(l_quantity) > 100\n  )\n  and c_custkey = o_custkey\n  and o_orderkey = l_orderkey\ngroup by\n  c_name,\n  c_custkey,\n  o_orderkey,\n  o_orderdate,\n  o_totalprice\norder by\n  o_totalprice desc,\n  o_orderdate desc;",
        "submitted_query": "SELECT TOP 100 \n    c.c_name AS customer_name, \n    c.c_custkey AS customer_key, \n    o.o_orderkey AS order_key, \n    o.o_orderdate AS order_date, \n    o.o_totalprice AS total_price, \n    SUM(l.l_quantity) AS total_quantity\nFROM \n    tpch.customer c\nINNER JOIN \n    tpch.orders o ON c.c_custkey = o.o_custkey\nINNER JOIN \n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\nGROUP BY \n    c.c_name, c.c_custkey, o.o_orderkey, o.o_orderdate, o.o_totalprice\nHAVING \n    SUM(l.l_quantity) > 100  -- adjust the threshold value as needed\nORDER BY \n    o.o_totalprice DESC,\n    o.o_orderdate DESC;"
    },
    {
        "id": "Q19",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "select\n  sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom\n  tpch.lineitem,\n  tpch.part\nwhere\n  (\n    p_partkey = l_partkey\n    and p_brand = 'BRAND#13'\n    and p_container in ( 'SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')\n    and l_quantity >=20 and l_quantity <= 30\n    and p_size between 1 and 5\n    and l_shipmode in ('AIR', 'AIR REG')\n    and l_shipinstruct = 'DELIVER IN PERSON'\n  );",
        "submitted_query": "-- Calculate the gross discounted revenue for all orders for three different types of parts\n-- that were shipped by air and delivered in person.\nSELECT \n    -- Calculate the gross discounted revenue by summing the product of the extended price and the discount\n    SUM(l_extendedprice * (1 - l_discount)) AS gross_discounted_revenue\nFROM \n    -- Join the lineitem table with the part table on the partkey column\n    tpch.lineitem\nINNER JOIN \n    tpch.part ON l_partkey = p_partkey\nWHERE \n    -- Filter by brand\n    p_brand = 'BRAND#13'\n    -- Filter by container\n    AND p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')\n    -- Filter by quantity\n    AND l_quantity >= 20 AND l_quantity <= 30\n    -- Filter by size\n    AND p_size BETWEEN 1 AND 5\n    -- Filter by ship mode\n    AND l_shipmode IN ('AIR', 'AIR REG')\n    -- Filter by ship instructions\n    AND l_shipinstruct = 'DELIVER IN PERSON';"
    },
    {
        "id": "Q20",
        "grade": "Incorrect",
        "reason": "The answer is incorrect and has different data from the expected result.",
        "reference_query": "SELECT \n    s.s_name, \n    s.s_address\nFROM \n    tpch.supplier s\nJOIN \n    tpch.nation n ON s.s_nationkey = n.n_nationkey\nWHERE \n    s.s_suppkey IN (\n        -- Subconsulta para calcular o total de quantidade enviada por cada fornecedor e parte\n        SELECT \n            ps.ps_suppkey\n        FROM \n            tpch.partsupp ps\n        JOIN \n            tpch.part p ON ps.ps_partkey = p.p_partkey\n        WHERE \n            p.p_name LIKE '%spring%green%' \n            AND ps.ps_availqty > (\n                -- Subconsulta para calcular a soma total de quantidades enviadas por cada fornecedor\n                SELECT \n                    0.5 * SUM(l.l_quantity)  -- 0.5 * soma de l_quantity\n                FROM \n                    tpch.lineitem l\n                WHERE \n                    l.l_partkey = p.p_partkey\n                    AND l.l_suppkey = ps.ps_suppkey\n                    AND l.l_shipdate >= '1995-01-01'\n                    AND l.l_shipdate < '1996-01-01'\n            )\n    )\n    AND n.n_name = 'BRAZIL'\nORDER BY \n    s.s_name;",
        "submitted_query": "WITH \n-- Calculate total quantity shipped by each supplier for each part in 1995\nTotalQuantityShipped AS (\n    SELECT \n        l.l_suppkey,\n        l.l_partkey,\n        SUM(l.l_quantity) AS total_quantity\n    FROM \n        tpch.lineitem l\n    WHERE \n        l.l_shipdate >= '1995-01-01'\n        AND l.l_shipdate < '1996-01-01'\n    GROUP BY \n        l.l_suppkey,\n        l.l_partkey\n),\n\n-- Calculate average quantity shipped by each supplier for each part in 1995\nAverageQuantityShipped AS (\n    SELECT \n        l.l_suppkey,\n        l.l_partkey,\n        AVG(l.total_quantity) AS average_quantity\n    FROM \n        TotalQuantityShipped l\n    GROUP BY \n        l.l_suppkey,\n        l.l_partkey\n),\n\n-- Identify suppliers who have an excess of a given part available\nExcessSuppliers AS (\n    SELECT \n        ps.ps_suppkey,\n        ps.ps_partkey,\n        ps.ps_availqty\n    FROM \n        tpch.partsupp ps\n    JOIN \n        tpch.nation n ON ps.ps_suppkey = n.n_nationkey\n    WHERE \n        n.n_name = 'BRAZIL'\n        AND ps.ps_availqty > (SELECT average_quantity * 0.5 FROM AverageQuantityShipped aqs WHERE aqs.l_suppkey = ps.ps_suppkey AND aqs.l_partkey = ps.ps_partkey)\n)\n\n-- Select the suppliers who have an excess of a given part available\nSELECT \n    s.s_name,\n    p.p_name,\n    es.ps_availqty\nFROM \n    ExcessSuppliers es\nJOIN \n    tpch.supplier s ON es.ps_suppkey = s.s_suppkey\nJOIN \n    tpch.part p ON es.ps_partkey = p.p_partkey;"
    },
    {
        "id": "Q21",
        "grade": "Correct-",
        "reason": "The answer contains most of the same numeric values.",
        "reference_query": "select\n  s_name,\n  count(*) as numwait\nfrom\n  tpch.supplier,\n  tpch.lineitem l1,\n  tpch.orders,\n  tpch.nation\nwhere\n  s_suppkey = l1.l_suppkey\n  and o_orderkey = l1.l_orderkey\n  and o_orderstatus = 'F'\n  and l1.l_receiptdate > l1.l_commitdate\n  and exists (\n    select\n      *\n    from\n      tpch.lineitem l2\n    where\n      l2.l_orderkey = l1.l_orderkey\n      and l2.l_suppkey <> l1.l_suppkey\n    )\n  and s_nationkey = n_nationkey\n  and n_name = 'BRAZIL'\n  and not exists (\n    select\n      *\n    from\n      tpch.lineitem l3\n    where\n      l3.l_orderkey = l1.l_orderkey\n      and l3.l_suppkey <> l1.l_suppkey\n      and l3.l_receiptdate > l3.l_commitdate\n    )\ngroup by\n  s_name\norder by\n  numwait desc,\n  s_name;",
        "submitted_query": "WITH failed_suppliers AS (\n  SELECT \n    l.l_suppkey,\n    l.l_orderkey,\n    l.l_commitdate,\n    l.l_shipdate\n  FROM \n    tpch.lineitem l\n  WHERE \n    l.l_shipdate > l.l_commitdate\n),\nmulti_supplier_orders AS (\n  SELECT \n    o.o_orderkey,\n    COUNT(DISTINCT l.l_suppkey) AS num_suppliers\n  FROM \n    tpch.orders o\n  JOIN \n    tpch.lineitem l ON o.o_orderkey = l.l_orderkey\n  WHERE \n    o.o_orderstatus = 'F'\n  GROUP BY \n    o.o_orderkey\n  HAVING \n    COUNT(DISTINCT l.l_suppkey) > 1\n),\nfailed_suppliers_in_multi_orders AS (\n  SELECT \n    fs.l_suppkey,\n    fs.l_orderkey\n  FROM \n    failed_suppliers fs\n  JOIN \n    multi_supplier_orders mso ON fs.l_orderkey = mso.o_orderkey\n)\nSELECT \n  s.s_name,\n  s.s_nationkey,\n  n.n_name AS nation_name\nFROM \n  failed_suppliers_in_multi_orders fs\nJOIN \n  tpch.supplier s ON fs.l_suppkey = s.s_suppkey\nJOIN \n  tpch.nation n ON s.s_nationkey = n.n_nationkey\nWHERE \n  fs.l_orderkey NOT IN (\n    SELECT \n      l_orderkey\n    FROM \n      failed_suppliers\n    WHERE \n      l_orderkey IN (SELECT l_orderkey FROM failed_suppliers_in_multi_orders)\n    GROUP BY \n      l_orderkey\n    HAVING \n      COUNT(DISTINCT l_suppkey) > 1\n  )"
    },
    {
        "id": "Q22",
        "grade": "Equal",
        "reason": "The answer contains the same data values as the expected result.",
        "reference_query": "SELECT  \n    entrycode,  \n    COUNT(*) AS numcust,  \n    SUM(c_acctbal) AS totacctbal\nFROM (\n    SELECT    \n        SUBSTRING(c_phone, 1, 2) AS entrycode,    \n        c_acctbal  \n    FROM    \n        tpch.customer  \n    WHERE    \n        SUBSTRING(c_phone, 1, 2) IN ('10', '11')    \n        AND c_acctbal > (      \n            SELECT        \n                AVG(c_acctbal)      \n            FROM        \n                tpch.customer      \n            WHERE        \n                SUBSTRING(c_phone, 1, 2) IN ('10', '11')    \n        )    \n        AND NOT EXISTS (      \n            SELECT        \n                *      \n            FROM        \n                tpch.orders      \n            WHERE        \n                o_custkey = c_custkey    \n        ) \n) AS custsale\nGROUP BY  \n    entrycode\nORDER BY  \n    entrycode;",
        "submitted_query": "WITH \n-- Get country code from customer phone number\ncustomer_country AS (\n    SELECT \n        c_custkey,\n        c_acctbal,\n        LEFT(c_phone, 2) AS country_code\n    FROM \n        tpch.customer\n    WHERE\n        LEFT(c_phone, 2) IN ('10', '11')  -- replace with the desired country codes\n),\n-- Get customers who have not placed orders for 7 years\ninactive_customers AS (\n    SELECT \n        c.c_custkey,\n        c.country_code,\n        c.c_acctbal\n    FROM \n        customer_country c\n    WHERE \n        c.c_custkey NOT IN (SELECT o_custkey FROM tpch.orders)\n),\n-- Get average account balance for each country\navg_acctbal AS (\n    SELECT \n        country_code,\n        AVG(c_acctbal) AS avg_balance\n    FROM \n        inactive_customers\n    GROUP BY \n        country_code\n)\n-- Get customers with above average account balance\nSELECT \n    ic.country_code,\n    COUNT(ic.c_custkey) AS numcust,\n    SUM(ic.c_acctbal) AS totacctbal\nFROM \n    inactive_customers ic\nJOIN \n    avg_acctbal aa ON ic.country_code = aa.country_code\nWHERE \n    ic.c_acctbal > aa.avg_balance\nGROUP BY \n    ic.country_code\nORDER BY \n    numcust DESC;"
    }
]